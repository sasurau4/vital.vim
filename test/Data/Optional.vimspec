Describe Data.Optional
  Before all
    let O = vital#vital#new().import('Data.Optional')
  End

  Describe .none()
    It returns {none}
      let o = O.none()
      Assert True(O.is_optional(o))
      Assert True(O.empty(o))
      Assert False(O.exists(o))
    End
  End

  Describe .some()
    It returns {some} from the argument
      let o = O.some(42)
      Assert True(O.is_optional(o))
      Assert False(O.empty(o))
      Assert True(O.exists(o))
    End
  End

  Describe .new()
    It returns {some} from usual arguments
      if exists('v:null')
        let o = O.new(42)
        Assert False(O.empty(o))
        Assert True(O.exists(o))

        let o = O.new(42, 123)
        Assert False(O.empty(o))
        Assert True(O.exists(o))
      else
        Throws /^vital: Data.Optional:/ O.new(123)

        let o = O.new(42, 123)
        Assert False(O.empty(o))
        Assert True(O.exists(o))
      endif
    End

    It returns {none} from special arguments
      if exists('v:null')
        let o = O.new(v:null)
        Assert True(O.empty(o))
        Assert False(O.exists(o))
        Assert True(O.is_optional(o))

        let o = O.new(123, 123)
        Assert True(O.empty(o))
        Assert False(O.exists(o))
        Assert True(O.is_optional(o))

        let o = O.new(v:null, 123)
        Assert True(O.empty(o))
        Assert False(O.exists(o))
        Assert True(O.is_optional(o))
      else
        let o = O.new(123, 123)
        Assert True(O.empty(o))
        Assert False(O.exists(o))
        Assert True(O.is_optional(o))
      endif
    End
  End

  Describe .is_optional()
    It checks the argument is {some} or {none}
      Assert True(O.is_optional(O.none()))
      Assert True(O.is_optional(O.some(42)))
      Assert False(O.is_optional(42))
    End
  End

  Describe .empty()
    It returns true for {none}
      Assert True(O.empty(O.none()))
    End

    It returns false for {some}
      Assert False(O.empty(O.some(42)))
    End
  End

  Describe .exists()
    It returns true for {some}
      Assert True(O.exists(O.some(42)))
    End

    It returns false for {none}
      Assert False(O.exists(O.none()))
    End
  End

  Describe .get_or()
    Before all
      function! Negative1() abort
        return -1
      endfunction
    End

    After all
      delfunction Negative1
    End

    It returns the content of {some}
      Assert Equals(O.get_or(O.some(42), function('Negative1')), 42)
    End

    It returns the alternative of {none}
      Assert Equals(O.get_or(O.none(), function('Negative1')), -1)
    End
  End

  Describe .get()
    It returns the content of {some}
      Assert Equals(O.get(O.some(42)), 42)
    End

    It throws an exception if the value is {none}
      Throws /^vital: Data.Optional:/ O.get(O.none())
    End
  End

  Describe .get_unsafe()
    It accesses to the content of {some} directly
      Assert Equals(O.get_unsafe(O.some(42)), 42)
    End

    It causes internal error with {none}
      Throws /.*/ O.get_usafe(O.none())
    End
  End

  Describe .set()
    It sets a value to {optional}
      let o = O.none()
      call O.set(o, 42)

      Assert True(O.exists(o))
      Assert Equals(o, O.some(42))
    End
  End

  Describe .unset()
    It replaces the inside of {some} by {none}
      let o = O.some(42)
      call O.unset(o)

      Assert True(O.empty(o))
    End

    It does nothing for {none}
      let o = O.none()
      call O.unset(o)

      Assert True(O.empty(o))
    End
  End

  Describe .has()
    It checks the type of {some}'s value is the specified type
      let int = O.some(42)
      let str = O.some('aaa')
      let float = O.some(3.14)

      Assert True(O.has(int, type(0)))
      Assert True(O.has(str, type('')))
      Assert True(O.has(float, type(1.0)))

      Assert False(O.has(int, type('')))
      Assert False(O.has(str, type(1.0)))
      Assert False(O.has(float, type(0)))
    End
  End

  Describe .map()
    Before all
      function! Succ(x) abort
        return a:x + 1
      endfunction
    End

    After all
      delfunction Succ
    End

    It applies {some} to the function
      Assert Equal(
        \ O.map(O.some(1), function('Succ')),
        \ O.some(2))
    End

    It doesn't apply {none} to the function
      Assert Equal(
        \ O.map(O.none(), function('Succ')),
        \ O.none())
    End
  End

  Describe .apply()
    Before all
      function! Plus(x, y) abort
        return a:x + a:y
      endfunction
    End

    After all
      delfunction Plus
    End

    It applies one or more {some} with no {none} to the function
      Assert Equals(
        \ O.apply('Plus', O.some(10), O.some(20)),
        \ O.some(30))
    End

    It doesn't apply one or more {none} to the function
      Assert Equals(
        \ O.apply('Plus', O.some(42), O.none()),
        \ O.none())
    End

    It throws an exception when non-optional value is passed
      Throws /^vital: Data.Optional:/ O.apply('Plus', O.some(42), "non-optional value")
    End
  End

  Describe .bind()
    Before all
      function! Pure(x) abort
        let O = vital#vital#new().import('Data.Optional')
        return O.some(a:x)
      endfunction

      function! SafeDiv(a, b) abort
        let O = vital#vital#new().import('Data.Optional')
        return (a:b == 0)
          \ ? O.none()
          \ : O.some(a:a / a:b)
      endfunction
    End

    After all
      delfunction Pure
      delfunction SafeDiv
      unlet O
    End

    It applies one or more {some} with no {none} to the monadic function
      Assert Equals(
        \ O.bind('Pure', O.some(42)),
        \ O.some(42))

      Assert Equals(
        \ O.bind('SafeDiv', O.some(10), O.some(5)),
        \ O.some(2))
    End

    It doesn't apply one or more {none} to the function
      Assert Equals(
        \ O.bind('Pure', O.none()),
        \ O.none())
    End

    It throws an exception when non-optional value is passed
      Throws /^vital: Data.Optional:/ O.bind('SafeDiv', O.some(42), O.none(), "non-optional value")
    End
  End

  Describe .flatten()
    It removes a nest from {optional} by default
      Assert Equal(
        \ O.flatten(O.some(O.some(O.some(10)))),
        \ O.some(O.some(10)))

      Assert Equal(
        \ O.flatten(O.some(O.some(10))),
        \ O.some(10))

      Assert Equal(
        \ O.flatten(O.some(O.none())),
        \ O.none())

      Assert Equal(
        \ O.flatten(O.none()),
        \ O.none())
    End

    It fully removes nests from {optional} with 0
      Assert Equals(
        \ O.flatten(O.none(), 0),
        \ O.none())

      Assert Equals(
        \ O.flatten(O.some(42), 0),
        \ O.some(42))

      Assert Equals(
        \ O.flatten(O.some(O.some(O.some(42))), 0),
        \ O.some(42))

      Assert Equals(
        \ O.flatten(O.some(O.some(O.some(O.none()))), 0),
        \ O.none())
    End

    It removes nests from {optional} with specified limit
      Assert Equals(
        \ O.flatten(O.some(O.some(O.some(O.some(42)))), 2),
        \ O.some(O.some(42)))

      Assert Equals(
        \ O.flatten(O.some(O.some(O.some(42))), 1000),
        \ O.some(42))
    End
  End

  Describe .echo()
    It throws no exception
      call O.echo(O.some(42))
      call O.echo(O.none())
      call O.echo(O.some(42), 'Error')
      call O.echo(O.none(), 'Warning')
    End
  End
End
